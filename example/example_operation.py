# business_model_simulator/example/example_operation.py

from simulator.operation import Operation

class RegistrationOperation(Operation):
    """
    A specialized Operation subclass representing a registration process.
    This example includes a KYC fee when contract complexity is 'High'
    and a flat registration fee as the primary revenue.
    """

    def compute_cost(self):
        """
        Returns the total cost of the registration operation.
        Includes a KYC fee if contract complexity is set to 'High'.
        """
        base_cost = super().compute_cost()
        contract_complexity = self.contract_complexity

        # Example additional KYC fee
        if contract_complexity == 'High':
            kyc_fee = self.parameters.get('kyc_fee', 10.0)
            return base_cost + kyc_fee

        return base_cost

    def compute_revenue(self):
        """
        Returns the revenue generated by a registration operation.
        This example simply applies a flat fee per registration.
        """
        return super().compute_revenue()
